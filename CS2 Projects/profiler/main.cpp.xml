<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="main.cpp"><comment type="line">//</comment>
<comment type="line">//  main.cpp</comment>
<comment type="line">//  Profiler</comment>
<comment type="line">//</comment>
<comment type="line">//  Created by Jonathan Maletic.</comment>
<comment type="line">//  Copyright 2022 Kent State University. All rights reserved.</comment>
<comment type="line">//  Fall 2022</comment>
<comment type="line">//  srcML 1.0</comment>
<comment type="line">//</comment>
<comment type="line">//  Modified by: </comment>
<comment type="line">//</comment>
<comment type="line">//</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ASTree.hpp"</cpp:file></cpp:include>

<comment type="line">// Simple function to exercise/test copy-ctor, dtor, swap, assignment.</comment>
<comment type="line">//</comment>
<function><type><name>void</name></type> <name>testCopyAssign</name><parameter_list>(<parameter><decl><type><name>srcML</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"The orginal code: "</literal> <operator>&lt;&lt;</operator><name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"------------------------------------------------"</literal> <operator>&lt;&lt;</operator><name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>p</name></expr>;</expr_stmt>   <comment type="line">//Should print out same code as printed in main.</comment>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"------------------------------------------------"</literal> <operator>&lt;&lt;</operator><name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"No code: "</literal> <operator>&lt;&lt;</operator><name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>srcML</name><argument_list>()</argument_list></call></expr>;</expr_stmt>      <comment type="line">//Should print out nothing.</comment>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"------------------------------------------------"</literal> <operator>&lt;&lt;</operator><name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="line">// Input:  One or more srcML files, main must be first file</comment>
<comment type="line">// Output: One or more cpp files (with p- prefix) that are insturmented</comment>
<comment type="line">//</comment>
<comment type="line">// Example: profile main.cpp.xml utils.cpp.xml</comment>
<comment type="line">// Results: p-main.cpp p-utlis.cpp</comment>
<comment type="line">//</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cerr</name></name> <operator>&lt;&lt;</operator> <literal type="string">"Error: Input file(s) are required."</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cerr</name></name> <operator>&lt;&lt;</operator> <literal type="string">"       The main must be the first argument followed by "</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cerr</name></name> <operator>&lt;&lt;</operator> <literal type="string">"any other .cpp files.  For example:"</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cerr</name></name> <operator>&lt;&lt;</operator> <literal type="string">"profiler main.cpp.xml file1.cpp.xml file2.cpp.xml"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cerr</name></name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>srcML</name></type>                     <name>code</name></decl>;</decl_stmt>           <comment type="line">//Source code to be profiled.</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type>  <name>inputName</name></decl>;</decl_stmt>      <comment type="line">//Input file names (foo.cpp.xml)</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type>  <name>fileName</name></decl>;</decl_stmt>       <comment type="line">//File names       (foo.cpp)</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type>  <name>profileName</name></decl>;</decl_stmt>    <comment type="line">//Profile names    (foo_cpp)</comment>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>temp</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>                                   <comment type="line">//Get foo.cpp.xml</comment>
        <expr_stmt><expr><call><name><name>inputName</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                        <comment type="line">//Put in list</comment>
        <expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name><name>temp</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>temp</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="string">".xml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>         <comment type="line">//Remove .xml</comment>
        <expr_stmt><expr><call><name><name>fileName</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                         <comment type="line">//Put in list</comment>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>replace</name></name><argument_list>(<argument><expr><call><name><name>temp</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>temp</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//convert . to _</comment>
        <expr_stmt><expr><call><name><name>profileName</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                      <comment type="line">//Put in list</comment>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>ifstream</name></name></type> <name>inFile</name><argument_list>(<argument><expr><name><name>inputName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>    <comment type="line">//Read in the main</comment>
    <expr_stmt><expr><name>inFile</name> <operator>&gt;&gt;</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>inFile</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testCopyAssign</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>code</name><operator>.</operator><name>mainHeader</name></name><argument_list>(<argument><expr><name>profileName</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line">//Add in main header</comment>
    <expr_stmt><expr><call><name><name>code</name><operator>.</operator><name>mainReport</name></name><argument_list>(<argument><expr><name>profileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">//Add in the report</comment>
    <expr_stmt><expr><call><name><name>code</name><operator>.</operator><name>functionCount</name></name><argument_list>(<argument><expr><name><name>profileName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="line">//Count funciton invocations</comment>
    <expr_stmt><expr><call><name><name>code</name><operator>.</operator><name>lineCount</name></name><argument_list>(<argument><expr><name><name>profileName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>           <comment type="line">//Count line invocations</comment>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>outFileName</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>outFileName</name> <operator>=</operator> <literal type="string">"p-"</literal> <operator>+</operator> <name><name>fileName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>ofstream</name></name></type> <name>outFile</name><argument_list>(<argument><expr><call><name><name>outFileName</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>outFile</name> <operator>&lt;&lt;</operator> <name>code</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>outFile</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>inputName</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> <comment type="line">//Read rest of the files</comment>
        <expr_stmt><expr><call><name><name>inFile</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>inputName</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>inFile</name> <operator>&gt;&gt;</operator> <name>code</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>inFile</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>code</name><operator>.</operator><name>fileHeader</name></name><argument_list>(<argument><expr><name><name>profileName</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="line">//Add in file header info</comment>
        <expr_stmt><expr><call><name><name>code</name><operator>.</operator><name>functionCount</name></name><argument_list>(<argument><expr><name><name>profileName</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="line">//Count funciton invocations</comment>
        <expr_stmt><expr><call><name><name>code</name><operator>.</operator><name>lineCount</name></name><argument_list>(<argument><expr><name><name>profileName</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="line">//Count line invocations</comment>

        <expr_stmt><expr><name>outFileName</name> <operator>=</operator> <literal type="string">"p-"</literal> <operator>+</operator> <name><name>fileName</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outFile</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name><name>outFileName</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>outFile</name> <operator>&lt;&lt;</operator> <name>code</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outFile</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
